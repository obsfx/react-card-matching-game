{"version":3,"sources":["card-types.ts","constants.ts","components/Card.tsx","components/Deck.tsx","utils.ts","components/Overlay.tsx","components/HUD.tsx","components/Timer.tsx","components/Game.tsx","index.tsx"],"names":["cardTypes","cardWidth","Math","floor","Card","props","id","width","cardType","flipped","disabled","showCardType","increaseMatchedPairCountAfterDisabled","handleStageEndAfterFlippedBack","setCardProperty","handleFlipEnd","handleDisableEnd","className","style","height","onClick","onTransitionEnd","e","propertyName","currentTarget","target","classList","contains","Deck","pairCount","cards","flippedCards","increaseMatchedPairCount","setCards","setFlippedCards","handleCardMatch","handleCardMisMatch","handleStageEnd","useEffect","createCardObj","type","card","state","Map","set","cardsBuffer","i","selectedCardType","random","length","push","arr","temporaryValue","randomIndex","array","concat","currentIndex","shuffle","a","shift","b","undefined","map","get","isDisabled","isFlipped","Overlay","level","handleStart","href","HUD","secs","progress","extraTime","showExtraTimeIndicator","setExtraTimeIndicator","onAnimationEnd","Timer","setSeconds","interval","setInterval","clearInterval","Game","initialGameState","renderExtraTimeIndicator","startTimer","matchedPairCount","extraSecs","useState","gameState","setGameState","decreaseSeconds","useCallback","prevState","currentSecs","setExtraTime","increaseLevel","property","value","has","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.492acedd.chunk.js","sourcesContent":["export type cardType = 'ace_of_spades' |\n  'two_of_spades' |\n  'three_of_spades' |\n  'four_of_spades' |\n  'five_of_spades' |\n  'six_of_spades' |\n  'seven_of_spades' |\n  'eight_of_spades' |\n  'nine_of_spades' |\n  'ten_of_spades' |\n  'jack_of_spades' |\n  'king_of_spades' |\n  'queen_of_spades';\n\nexport const cardTypes: cardType[] = [\n  'ace_of_spades',\n  'two_of_spades',\n  'three_of_spades',\n  'four_of_spades',\n  'five_of_spades',\n  'six_of_spades',\n  'seven_of_spades',\n  'eight_of_spades',\n  'nine_of_spades',\n  'ten_of_spades',\n  'jack_of_spades',\n  'king_of_spades',\n  'queen_of_spades'\n];\n","const deckColCount: number = 8;\nexport const deckWidth: number = 600;\nexport const cardWidth: number = Math.floor((deckWidth - (deckColCount* 10) - 30) / deckColCount);\n","import React, { TransitionEvent } from 'react';\n\ntype cardProps = {\n  id: number,\n  width: number,\n  cardType: string,\n  flipped: boolean,\n  disabled: boolean,\n  showCardType: boolean,\n  increaseMatchedPairCountAfterDisabled: boolean,\n  handleStageEndAfterFlippedBack: boolean,\n  setCardProperty: (i: number, property: cardStateProperties, value: boolean) => void,\n  handleFlipEnd: (isDisabled: boolean, isFlipped: boolean, handleStageEndAfterFlippedBack: boolean) => void,\n  handleDisableEnd: (increaseMatchedPairCountAfterDisabled: boolean) => void\n}\n\nexport type cardStateProperties = 'type' |\n  'flipped' |\n  'disabled' |\n  'showCardType' |\n  'increaseMatchedPairCountAfterDisabled' |\n  'handleStageEndAfterFlippedBack';\n\nexport type cardObj = {\n  type: string,\n  state: Map<cardStateProperties, boolean>\n}\n\nconst Card = (props: cardProps) => {\n  const { \n    id,\n    width,\n    cardType, \n    flipped,\n    disabled,\n    showCardType,\n    increaseMatchedPairCountAfterDisabled,\n    handleStageEndAfterFlippedBack,\n    setCardProperty,\n    handleFlipEnd,\n    handleDisableEnd\n  } = props;\n\n  const handleClick = () => {\n    if (flipped || disabled) return;\n    setCardProperty(id, 'flipped', true);\n    setCardProperty(id, 'showCardType', true);\n  }\n\n  const handleDisableTransitionEnd = (e: TransitionEvent) => {\n    if (e.propertyName === 'transform' && e.currentTarget === e.target && e.currentTarget.classList.contains('card-disabled')) {\n      handleDisableEnd(increaseMatchedPairCountAfterDisabled);\n    }\n  }\n\n  const handleFlipTransitionEnd = (e: TransitionEvent) => {\n    if (e.propertyName === 'transform' && e.currentTarget === e.target) {\n      handleFlipEnd(disabled, flipped, handleStageEndAfterFlippedBack);\n\n      if (!flipped) {\n        setCardProperty(id, 'showCardType', false);\n      }\n    }\n  }\n\n  return (\n    <div \n      className={`card-container ${disabled ? 'card-disabled' : ''}`} \n      style={{ width, height: width * 1.422}}\n      onClick={handleClick}\n      onTransitionEnd={handleDisableTransitionEnd}>\n      <div \n        className={`card ${!flipped ? 'back-flipped' : ''} flip-transition`}\n        onTransitionEnd={handleFlipTransitionEnd}>\n        <div className={`card-face card-front ${showCardType ? cardType : ''} ${disabled ? 'card-face-disabled' : ''}`}></div>\n        <div className={`card-face card-back`}></div>\n      </div>\n    </div>\n  )\n};\n\nexport default Card;\n","import React, { useEffect } from 'react';\nimport { cardType, cardTypes } from '../card-types';\nimport { deckWidth, cardWidth } from '../constants';\nimport { shuffle } from '../utils';\nimport Card, { cardObj, cardStateProperties } from './Card';\n\ntype deckProps = {\n  pairCount: number,\n  cards: cardObj[],\n  flippedCards: number[],\n  increaseMatchedPairCount: () => void,\n  setCards: (cards: cardObj[]) => void,\n  setCardProperty: (id: number, property: cardStateProperties, value: boolean) => void,\n  setFlippedCards: (flippedCards: number[]) => void,\n  handleCardMatch: (a: number, b: number) => void,\n  handleCardMisMatch: (a: number, b: number) => void,\n  handleStageEnd: () => void\n}\n\nconst Deck = (props: deckProps) => {\n  const { \n    pairCount,\n    cards,\n    flippedCards,\n    increaseMatchedPairCount,\n    setCards,\n    setCardProperty,\n    setFlippedCards,\n    handleCardMatch,\n    handleCardMisMatch,\n    handleStageEnd\n  } = props;\n\n  const handleFlipEnd = (i: number, isDisabled: boolean, isFlipped: boolean, handleStageEndAfterFlippedBack: boolean) => {\n    if (!isDisabled && isFlipped) {\n      setCardProperty(i, 'flipped', true);\n      setFlippedCards(flippedCards.concat(i));\n    }\n\n    if (handleStageEndAfterFlippedBack && !isFlipped) {\n      setCardProperty(i, 'handleStageEndAfterFlippedBack', false);\n      handleStageEnd();\n    }\n  }\n\n  const handleDisableEnd = (i: number, increaseMatchedPairCountAfterDisabled: boolean) => {\n    if (increaseMatchedPairCountAfterDisabled) {\n      setCardProperty(i, 'increaseMatchedPairCountAfterDisabled', false);\n      increaseMatchedPairCount();\n    }\n  }\n\n  useEffect(() => {\n    const createCardObj = (type: cardType): cardObj => {\n      let card: cardObj = {\n        type,\n        state: new Map<cardStateProperties, boolean>()\n      }\n\n      card.state.set('flipped', false);\n      card.state.set('disabled', false);\n      card.state.set('showCardType', false);\n      card.state.set('increaseMatchedPairCountAfterDisabled', false);\n      card.state.set('handleStageEndAfterFlippedBack', false);\n\n      return card;\n    }\n\n    let cardsBuffer: cardObj[] = [];\n\n    for (let i = 0; i < pairCount; i++) {\n      let selectedCardType: cardType = cardTypes[Math.floor(Math.random() * cardTypes.length)];\n      cardsBuffer.push(createCardObj(selectedCardType), createCardObj(selectedCardType));\n    }\n\n    setCards(shuffle(cardsBuffer));\n  }, [pairCount, setCards]);\n\n  useEffect(() => {\n    while (flippedCards.length - 1 > 0) {\n      let a: number | undefined = flippedCards.shift();\n      let b: number | undefined = flippedCards.shift();\n\n      if (a !== undefined && b !== undefined) {\n        if (cards[a].type === cards[b].type) {\n          handleCardMatch(a, b);\n        } else {\n          handleCardMisMatch(a, b);\n        }\n      }\n\n      setFlippedCards(flippedCards);\n    }\n  }, [flippedCards, cards, handleCardMatch, handleCardMisMatch, setFlippedCards]);\n\n  return(\n    <div className=\"deck\" \n      style={{ width: deckWidth }}>\n      <div className=\"deck-wrapper\">\n        {\n          cards.map((card: cardObj, i: number) => (\n            <Card \n              key={i}\n              id={i}\n              width={cardWidth}\n              cardType={card.type}\n              flipped={card.state.get('flipped') || false}\n              disabled={card.state.get('disabled') || false}\n              showCardType={card.state.get('showCardType') || false}\n              increaseMatchedPairCountAfterDisabled={card.state.get('increaseMatchedPairCountAfterDisabled') || false}\n              handleStageEndAfterFlippedBack={card.state.get('handleStageEndAfterFlippedBack') || false}\n              setCardProperty={setCardProperty}\n              handleFlipEnd={(isDisabled: boolean, isFlipped: boolean, handleStageEndAfterFlippedBack: boolean) => handleFlipEnd(i, isDisabled, isFlipped, handleStageEndAfterFlippedBack)}\n              handleDisableEnd={(increaseMatchedPairCountAfterDisabled: boolean) => handleDisableEnd(i, increaseMatchedPairCountAfterDisabled)}\n            />\n          ))\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default Deck;\n","// https://stackoverflow.com/a/2450976/13615958\nexport const shuffle = <T extends {}>(arr: T[]) => {\n  let emptyArr: T[] = [];\n  let array: T[] = emptyArr.concat(arr);\n  let currentIndex = array.length;\n  let temporaryValue;\n  let randomIndex;\n\n  while (currentIndex !== 0) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n","import React from 'react';\n\ntype overlayProps = {\n  state: 'start' | 'endgame',\n  level: number,\n  handleStart: () => void\n}\nconst Overlay = (props: overlayProps) => {\n  const { \n    state,\n    level,\n    handleStart \n  } = props;\n\n  return (\n    <div className=\"overlay\">\n      <div className=\"overlay-wrapper\">\n        { state === 'start' && \n          <>\n            <h2>Card Matching Game</h2>\n            <p>Built with <strong>React</strong>.</p>\n            <p><a href=\"https://github.com/obsfx/react-card-matching-game\">github.com/obsfx/react-card-matching-game</a></p>\n            <div className=\"start-button\" onClick={handleStart}>Start</div>\n          </>\n        }\n        { state === 'endgame' && \n          <>\n            <h2>Time's Up!</h2>\n            <p>Level you reached <strong>{level}</strong></p>\n            <div className=\"start-button\" onClick={handleStart}>Play Again</div>\n          </>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default Overlay;\n","import React from 'react';\n\ntype hudProps = {\n  secs: number,\n  progress: number,\n  level: number,\n  extraTime: number,\n  showExtraTimeIndicator: boolean,\n  setExtraTimeIndicator: (renderExtraTimeIndicator: boolean) => void\n}\n\nconst HUD = (props: hudProps) => {\n  const {\n    secs,\n    progress,\n    level,\n    extraTime,\n    showExtraTimeIndicator,\n    setExtraTimeIndicator\n  } = props;\n\n  return (\n    <div className=\"hud\">\n      <div className=\"timer\">\n        { \n          showExtraTimeIndicator && \n          <div \n          className=\"extra-time\" \n          onAnimationEnd={() => setExtraTimeIndicator(false)}>\n            +{ Math.floor(extraTime / 60) }\n            : \n            { extraTime % 60 < 10 ? `0${extraTime % 60}` : extraTime % 60 }\n          </div> \n        }\n        { Math.floor(secs / 60) }\n        :\n        { secs % 60 < 10 ? `0${secs % 60}` : secs % 60 }\n      </div>\n\n      <div className=\"progress-bar\">\n        <div className=\"level-indicator\">\n          Level <span className=\"level-number\">{level}</span>\n        </div>\n        <div className=\"bar\">\n          <div className=\"progress\" style={{ width: `${progress}%` }}></div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default HUD;\n","import { useEffect } from 'react';\n\ntype timerProps = {\n  setSeconds: () => void\n}\n\nconst Timer = (props: timerProps) => {\n  const { setSeconds } = props;\n\n  useEffect(() => {\n    const interval: NodeJS.Timeout = setInterval(() => setSeconds(), 1000);\n    return () => clearInterval(interval);\n  }, [setSeconds]);\n\n  return null;\n}\n\nexport default Timer;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { cardObj, cardStateProperties } from './Card';\nimport Deck from './Deck';\nimport Overlay from './Overlay';\nimport HUD from './HUD';\nimport Timer from './Timer';\n\nexport type gameState = {\n  state: 'start' | 'action' | 'endgame',\n  renderExtraTimeIndicator: boolean,\n  startTimer: boolean,\n  pairCount: number,\n  matchedPairCount: number,\n  secs: number,\n  extraSecs: number,\n  level: number,\n  cards: cardObj[],\n  flippedCards: number[]\n}\n\nconst Game = () => {\n  const initialGameState: gameState = {\n    state: 'start',\n    renderExtraTimeIndicator: false,\n    startTimer: false,\n    pairCount: 3,\n    matchedPairCount: 0,\n    secs: 60,\n    extraSecs: 0,\n    level: 1,\n    cards: [],\n    flippedCards: []\n  }\n\n  const [ gameState, setGameState ] = useState<gameState>({\n    ...initialGameState\n  });\n\n  const startGame = () => {\n    setGameState({\n      ...initialGameState,\n      state: 'action',\n      startTimer: true\n    });\n  }\n\n  const decreaseSeconds = useCallback(() => {\n    setGameState((prevState: gameState) => {\n      let currentSecs: number = prevState.secs - 1;\n\n      if (currentSecs < 0) {\n        setGameState((prevState: gameState) => ({\n          ...prevState,\n          state: 'endgame',\n          startTimer: false\n        }));\n      }\n\n      return {\n        ...prevState,\n        secs: currentSecs < 0 ? 0 : currentSecs\n      }\n    });\n  }, []);\n\n  const setExtraTime = useCallback((extraSecs: number) => {\n    setGameState((prevState: gameState) => ({\n      ...prevState,\n      extraSecs\n    }));\n  }, []);\n\n  const setExtraTimeIndicator = useCallback((renderExtraTimeIndicator: boolean) => {\n    setGameState((prevState: gameState) => ({\n      ...prevState,\n      renderExtraTimeIndicator\n    }));\n  }, []);\n\n  const increaseLevel = useCallback(() => {\n    setGameState((prevState: gameState) => ({\n      ...prevState,\n      level: prevState.level + 1\n    }));\n  }, []);\n\n  const setCards = useCallback((cards: cardObj[]) => {\n    setGameState((prevState: gameState) => ({\n      ...prevState,\n      cards\n    }));\n  }, []);\n\n  const setCardProperty = useCallback((id: number, property: cardStateProperties, value: boolean) => {\n    setGameState((prevState: gameState) => ({\n      ...prevState,\n      cards: prevState.cards.map((card: cardObj, i: number) => {\n        if (i === id && card.state.has(property)) card.state.set(property, value);\n        return card;\n      })\n    }));\n  }, []);\n\n  const setFlippedCards = useCallback((flippedCards: number[]) => {\n    setGameState((prevState: gameState) => ({\n      ...prevState,\n      flippedCards\n    }));\n  }, []);\n\n  const increaseMatchedPairCount = useCallback(() => {\n    setGameState((prevState: gameState) => ({ \n      ...prevState, \n      matchedPairCount: prevState.matchedPairCount + 1 \n    }));\n  }, [])\n\n  const handleCardMatch = useCallback((a: number, b: number) => {\n    setGameState((prevState: gameState) => ({ \n      ...prevState, \n      cards: prevState.cards.map((card: cardObj, i: number) => {\n        if (i === a || i === b) card.state.set('disabled', true);\n        if (i === b) card.state.set('increaseMatchedPairCountAfterDisabled', true);\n        return card;\n      }) \n    }));\n  }, []);\n\n  const handleCardMisMatch = useCallback((a: number, b: number) => {\n    setGameState((prevState: gameState) => ({ \n      ...prevState, \n      cards: prevState.cards.map((card: cardObj, i: number) => {\n        if (i === a || i === b) card.state.set('flipped', false);\n        return card;\n      }) \n    }));\n  }, []);\n\n  const handleStageEnd = useCallback(() => {\n    setGameState((prevState: gameState) => {\n      let pairCount: number = prevState.pairCount + 1;\n      let extraTime: number = prevState.pairCount * 4;\n\n      setExtraTime(extraTime);\n\n      return {\n        ...prevState,\n        pairCount,\n        secs: prevState.secs + extraTime,\n        matchedPairCount: 0\n      }\n    });\n\n    setExtraTimeIndicator(true);\n    increaseLevel();\n  }, [setExtraTime, setExtraTimeIndicator, increaseLevel]);\n\n  useEffect(() => {\n    if (gameState.matchedPairCount === gameState.pairCount) {\n      setGameState((prevState: gameState) => ({\n        ...prevState,\n        cards: prevState.cards.map((card: cardObj, i: number) => {\n          if (i === 0) card.state.set('handleStageEndAfterFlippedBack', true);\n          card.state.set('disabled', false);\n          card.state.set('flipped', false);\n          return card;\n        })\n      }));\n    }\n  }, [gameState.matchedPairCount, gameState.pairCount]);\n\n  return (\n    <div>\n      <div className=\"game\">\n        <HUD \n          secs={gameState.secs}\n          level={gameState.level}\n          progress={100 / gameState.pairCount * gameState.matchedPairCount}\n          extraTime={gameState.extraSecs}\n          showExtraTimeIndicator={gameState.renderExtraTimeIndicator}\n          setExtraTimeIndicator={setExtraTimeIndicator}\n        />\n        <div className=\"playground\">\n          { gameState.startTimer && <Timer setSeconds={decreaseSeconds} /> }\n          { (gameState.state === 'start' || gameState.state === 'endgame') &&\n            <Overlay \n              state={gameState.state}\n              level={gameState.level}\n              handleStart={startGame}\n            />\n          }\n          { gameState.state === 'action' &&\n            <Deck \n              pairCount={gameState.pairCount}\n              cards={gameState.cards}\n              flippedCards={gameState.flippedCards}\n              increaseMatchedPairCount={increaseMatchedPairCount}\n              setCards={setCards}\n              setCardProperty={setCardProperty}\n              setFlippedCards={setFlippedCards}\n              handleCardMatch={handleCardMatch}\n              handleCardMisMatch={handleCardMisMatch}\n              handleStageEnd={handleStageEnd}\n            /> \n          }\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './assets/scss/index.scss';\nimport Game from './components/Game';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}